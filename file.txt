
import React from 'react'

class App extends React.Component
{
    constructor()
    {
      super()      
      this.state = {
        employees : [
          {empid:101 , name : 'Anu' , age : 32 , 
          email : "anu@gmail.com", salary : 45000 , bonus : 1500},
          {empid:102 , name : 'Sonu' , age : 21 , 
          email : "sonu@gmail.com", salary : 41000 , bonus : 2450},
        ],
        duplicateStatus : false,
        duplicateMessage : ""
      }
    }

    addEmp = ()=>{
       var ob = { empid : this.idbox.value*1 , 
                  name : this.namebox.value , 
                  age : this.agebox.value*1 , 
                  email : this.emailbox.value,
                  salary : this.salbox.value*1 , 
                  bonus : this.bonusbox.value*1 }
      //console.log(ob)                  
      this.setState({employees : [...this.state.employees,ob]})
    }

    checkUniqueValue = (event)=>{
        var data = event.target.value
        var id = event.target.id
        //console.log(data,id)
        
        
        //=--=============================================================================================
        const { request } = require('express');
const { json } = require('express/lib/response');
const winston= require('winston');
const express = require ('express');
const router = express.Router();
const {createLogger, transports,format,meta}= require('winston');
const { timeStamp } = require('console');
const bodyParser = require('body-parser');
const { url } = require('inspector');
const { combine, timestamp, label, prettyPrint ,printf} = format;
var jsonParser = bodyParser.json()
var urleccodedParser= bodyParser.urlencoded({extended: false});
const http=require('http');
var address = require('address');
let mydate = new Date();
let newFilename = "logs/" + "_" + mydate.getFullYear() + "-" + mydate.getMonth() + "-" + mydate.getDate() + "-" + "success.log";
const {method,message}=request;

router.post('/post/success/:id', jsonParser, (req,res)=>{
function success(){
    let url = req.protocol + ".//"+ req.get('host') +req.originalUrl;
       logger.info("Message : Sample API ");
       logger.info("REQUEST ID :"+req.params.id);
       logger.info("CLIENT IP ADDRESS: "+address.ip());
       logger.info("URL:"+url);
       logger.info("METHOD:"+req.method);
logger.info("HTTP_REQUEST_BODY:",(req.body));
res.status(200).json({"Message":"Success"});
logger.info("HTTP_STATUS_CODE :"+res.statusCode);
logger.info("HTTP_RESPONSE_MESSAGE:", (req.json,{"message":"Success"}));
}
success();
});
const logger = createLogger({
    transports:[
        new transports.File({
            filename:newFilename,
            level:'info',
            meta:true,
            colorize: true,
            format: combine(
             timestamp(),
            //  winston.format.printf(info =>  ` ${info.level} ${info.timestamp}  Message : ${info.message}
            //  ${info.timestamp}  Url : ${(url)}
            //  ${info.timestamp}  Method : ${info.method}
            //  ${info.timestamp}  HTTP_Request_Body : ${info. HTTP_Request_Body}
            //  ${info.timestamp}  HTTP_Response_Message : ${info. HTTP_Response_Message}
            //  ${info.timestamp}  HTTP_Response : ${info. HTTP_Response} `),
           
           winston.format.printf(info => {
           return `level : ${info.level}  ${info.timestamp}  ${JSON.stringify(info.message)}`;
          
             })
           )
        })
      
    ]
  
});
module.exports = router;//success.js


error.js
const { request } = require('express');
const { json } = require('express/lib/response');
const winston= require('winston');
const express = require ('express');
const router = express.Router();
var address= require('address');
const fs = require ('fs');
const {createLogger, transports,format,meta}= require('winston');
const { timeStamp } = require('console');
const bodyParser = require('body-parser');
const { url } = require('inspector');
const { combine, timestamp, label, prettyPrint ,printf} = format;
var jsonParser = bodyParser.json()
var urleccodedParser= bodyParser.urlencoded({extended: false});
const http=require('http');
let mydate = new Date();
let newFilename = "logs/" + "_" + mydate.getFullYear() + "-" + mydate.getMonth() + "-" + mydate.getDate() + "-" + "error.log";
const {method,message}=request;

router.post('/post/error/:id', jsonParser, (req,res)=>{
function error(){
   let url = req.protocol + ".//"+ req.get('host') +req.originalUrl;
    logger.error("Message : Sample API Calling");
    logger.error("REQUEST ID :"+req.params.id);
    logger.info("CLIENT IP ADDRESS: "+address.ip());
    logger.error("URL:"+url);
    logger.error("METHOD:"+req.method);
logger.error("HTTP_REQUEST_BODY:",(req.body));
res.status(400).json({"Message":"Error"});
logger.error("HTTP_STATUS_CODE :"+res.statusCode);
logger.error("HTTP_RESPONSE_MESSAGE:", (req.json,{"message":"Error"}));
}
error();
 });
const logger = createLogger({
    transports:[
        new transports.File({
            filename:newFilename,
            level:'error',
            meta:true,
            colorize: true,
            format: combine(
             timestamp(),
            //  winston.format.printf(info => `${info.timestamp}  Message : ${info.message}
            //  ${info.timestamp}  Url : ${info.url}
            //  ${info.timestamp}  Method : ${info.method}
            //  ${info.timestamp}  HTTP_Request_Body : ${info. HTTP_Request_Body}
            //  ${info.timestamp}  HTTP_Response_Message : ${info. HTTP_Response_Message}
            //  ${info.timestamp}  HTTP_Response : ${info. HTTP_Response} `),
           
           winston.format.printf(info => {
           return `level : ${info.level} ,${info.timestamp}   , ${JSON.stringify(info.message)}`;
          
             })
             )
        })
    ]
  
});
module.exports = router;
''
index.js


const express = require ('express');

const bodyParser = require('body-parser');
const app = express();
app.use(bodyParser.json());
// const updateSuccessRoutes= require('./routes/updateSuccess');
const errorRoutes= require('./routes/error');
const successRoutes= require('./routes/success');

app.use(bodyParser.urlencoded({extended:true}))

app.listen(3000);
console.log("log details")
// app.use('/user', updateSuccessRoutes);
 app.use('/user',errorRoutes);
app.use('/user',successRoutes);



        var status = this.state.employees.find((emp)=>emp[id]==data)!=undefined;        

        var msg = `Duplicate Value found in ${id} !`
        this.setState({duplicateStatus:status,duplicateMessage:msg})
    }

    deleteEmp = (id) =>{
      var newdata=this.state.employees.filter(emp=>emp.empid!=id);
      this.setState({employees : newdata})
    }
  
      deleteEmp1 =(index) =>
      {
        console.log(index)
        var newdata=[...this.state.employees]
        newdata.splice(index ,1);
        console.log(newdata)
        this.setState({employees:newdata})
      }
    
    


    render()
    {     
      return <div>
          <h1>Employee Records</h1>   

          <input type='text' id="empid" ref={c=>this.idbox=c} 
          onBlur={this.checkUniqueValue}
          onFocus={()=>this.setState({duplicateStatus:false,duplicateMessage:''})}
          placeholder='Employee ID'/>&nbsp;

          <input type='text' ref={c=>this.namebox=c} placeholder='Employee Name'/>&nbsp;
          <input type='number' ref={c=>this.agebox=c} placeholder='Employee Age'/>&nbsp;

          <input type='email' id="email" ref={c=>this.emailbox=c} 
          onBlur={this.checkUniqueValue}
          onFocus={()=>this.setState({duplicateStatus:false,duplicateMessage:''})}
          placeholder='Employee Email'/>&nbsp;

          <input type='number' ref={c=>this.salbox=c} placeholder='Employee Salary'/>&nbsp;
          <input type='number' ref={c=>this.bonusbox=c} placeholder='Employee Bonus'/>&nbsp;
          <br/><br/>

          {this.state.duplicateStatus?<b style={{color:"red"}}>{this.state.duplicateMessage}</b>:<button onClick={this.addEmp}>Add Employee</button>}
          

          <hr/>

          <table border='1' align='center' cellPadding="10" cellSpacing="5">
            <thead>
            <tr>
              <th>S.No.</th>
              <th>Employee ID</th>
              <th>Name</th>
              <th>Age</th>
              <th>Email</th>
              <th>Salary</th>
              <th>Bonus</th>
              <th>Total Salary</th>
              <th> Operation </th>
            </tr>
            </thead>
            <tbody>
            {this.state.employees.map((emp,index)=>
            {
              return <tr key={index}>
                <td scope="emp">{index}</td>
                <td>{index+1}</td>
                <td>{emp.empid}</td>
                <td>{emp.name}</td>
                <td>{emp.age}</td>
                <td>{emp.email}</td>
                <td>{emp.salary}</td>
                <td>{emp.bonus}</td>
                <td>{emp.salary+emp.bonus}</td>
                <td>
                  <button style={{color:"red"}} onClick ={()=>this.deleteEmp(emp.empid)}> Delete</button>
                  &nbsp;
                  <button style={{color:"red"}} onClick ={()=>this.deleteEmp1(index)}> Delete by Index</button>

                  &nbsp;
                  <button style={{color:"green"}} OnClick={() => this.updateEmp}> Update</button>
                </td>
              </tr>
            })}
            </tbody>
          </table>
      </div>
    }
}

---------------------

mport React from 'react'


class App extends React.Component
{
 
  
  
    constructor()
    {
      
      super()      
      this.state = {
        products : [
          {pname:"Vivo One Plus" , company : "Vivo" , category:"Mobile" , 
          price : 12000, discount : 500 , },
          {pname:"Sony plus" , company : "Sony" , category:"TV" , 
          price : 42000, discount : 1500},
          {pname:"HP Laptop" , company : "HP" , category:"Laptop" , 
          price : 29000, discount : 1000},
          {pname:"ACER  Laptop" , company : "ACER" , category:"Laptop" , 
          price : 27000, discount : 1000},
          {pname:"Samsung one plus" , company : "Samsung" , category:"TV" , 
          price : 45000, discount : 2000},
        ]
       
      }
    
    }
    

    
  
    render()
    {     
      
      return <div>
        
          <center>
          <h1>E-COMMERCE WEBSITE</h1> 
          </center>
         
 <table border='5' align='center' cellPadding="25" cellSpacing="5">
            <thead>
            <tr>
              <th>pname</th>
              <th>company</th>
              <th>category</th>
              <th>price</th>
              <th>discount</th>
              <th>Total price</th>
              <th>Image</th>
              <th>Operation</th>
             
            </tr>
            </thead>
            <tbody>
            {this.state.products.map((prop,index)=>
            {
              return <tr key={index}>
                
               
                <td>{prop.pname}</td>
                <td>{prop.company}</td>
                <td>{prop.category}</td>
                <td>{prop.price}</td>
                <td>{prop.discount}</td>
               
                <td>{prop.price-prop.discount}</td>
                <td>{prop.image}</td>
                <td>
                  <button style={{color:"Green"}} > BUY</button>
                  &nbsp;
              </td>
              </tr>
            })}
            </tbody>
         
          </table>
        </div>
    }

export default App;
