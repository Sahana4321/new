erver.port=7070
spring.jpa.generate-ddl=true

spring.datasource.driver-class-name=com.mysql.jdbc.Driver
spring.datasource.url=jdbc:mysql://localhost:3306/booking
spring.datasource.username=root
spring.datasource.password=root
spring.jpa.hibernate.ddl-auto=update

------------------------------------------------------------------------------------------------
package com.hotel.booking.repository;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import  com.hotel.booking.model.user;

@Repository

public interface UserRepository  extends JpaRepository <user, String >{

}
----------------------------------------------------------------------------------------------------
package com.hotel.booking.model;

import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Table;

@Entity 
@Table(name = "user")
public class user {
	@Id
	@GeneratedValue(strategy=GenerationType.AUTO)
	private Integer Id;
	private String firstName;
	private String lastName;
	private String emailId;
	private String password;
	public Integer getId() {
		return Id;
	}
	public void setId(Integer id) {
		Id = id;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getEmailId() {
		return emailId;
	}
	public void setEmailId(String emailId) {
		this.emailId = emailId;
	}
	public String getPassword() {
		return password;
	}
	public void setPassword(String password) {
		this.password = password;
	}
	@Override
	public String toString() {
		return "user [Id=" + Id + ", firstName=" + firstName + ", lastName=" + lastName + ", emailId=" + emailId
				+ ", password=" + password + "]";
	}
	public user(Integer id, String firstName, String lastName, String emailId, String password) {
		super();
		Id = id;
		this.firstName = firstName;
		this.lastName = lastName;
		this.emailId = emailId;
		this.password = password;
	}
	

}
--------------------------------------------------------------------------------------------------------
package com.hotel.booking.responses;

public class Response {

	private int code;
	private String msg;
	private Object obj;
	public int getCode() {
		return code;
	}
	public void setCode(int code) {
		this.code = code;
	}
	public String getMsg() {
		return msg;
	}
	public void setMsg(String msg) {
		this.msg = msg;
	}
	public Object getObj() {
		return obj;
	}
	public void setObj(Object obj) {
		this.obj = obj;
	}
	@Override
	public String toString() {
		return "Response [code=" + code + ", msg=" + msg + ", obj=" + obj + "]";
	}
	public Response(int code, String msg, Object obj) {
		super();
		this.code = code;
		this.msg = msg;
		this.obj = obj;
	}
	
	
}
-------------------------------------------------------------------------------------------------------------
package com.hotel.booking.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.hotel.booking.model.user;
import com.hotel.booking.repository.UserRepository;
import com.hotel.booking.responses.Response;

@RestController
@RequestMapping("/user")
@CrossOrigin
public class UserController {
	@Autowired
	UserRepository userRepository;
	
	@PostMapping("/Register")
	public Response addUser(@RequestBody user usr)
	{
		if(userRepository.count()>0)
		{
			List<user> list=userRepository.findAll();
			for(user usr2: list) {
				if(usr2.getEmailId().equals(usr.getEmailId())) {
					return new Response( 400, "User Already Exist", usr);
				}
			}
			
		}
		userRepository.save(usr);
		return new Response(200, "Registration successfull", usr);
	}
	
	@PostMapping("/Login")
	public Response login(@RequestBody user usr)
	{
		if(userRepository.count()>0)
		{
			List<user> data =userRepository.findAll();
			for(user usr2: data) {
				if(usr2.getEmailId().equals(usr.getEmailId()) && usr2.getPassword().equals(usr.getPassword())) {
					return new Response( 400, "User Already Exist", usr);
				}
			}
			
		}
		userRepository.save(usr);
		return new Response(200, "Registration successfull", usr);
	}
	
}
